#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include "helper.h"
#include "extra_keys.h"

#define DEF 0
#define SYM 1
#define NAV 2
#define RHTLYR 3
#define TRI 4

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&mt { 
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define NAV_LEFT  &mt HOME LEFT      // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt END RIGHT      // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP    // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END) DOWN   // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LA(BSPC) BSPC  // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL) DEL    // tap: del   | long-tap: delete word forward
#define FWD &kp LG(RBKT)
#define BACK &kp LG(LBKT)
#define TAB_L &kp LG(LS(LBKT))
#define TAB_R &kp LG(LS(RBKT))
#define SPACE_L &kp LG(LA(LEFT))
#define SPACE_R &kp LG(LA(RIGHT))
#define SW_WIN &kp UP
#define SW_APP &kp UP
#define MEH(key) &kp LS(LC(LA(key)))

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1                                       // thumbs

// urob's aswesome home mod feature (https://github.com/urob/zmk-config/)
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "c


// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )
// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)


/ {
    combos {
        compatible = "zmk,combos";

        #include "combos.dtsi"
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
        //╭──────╮ ╭──────────────┬──────────────┬──────────────┬────────────────┬──────────────╮   ╭───────────────┬──────────────┬──────────────┬──────────────┬──────────────╮ ╭──────╮
            X_LT     &kp Q         &kp W          &kp F           &kp P            &kp B              &kp J           &kp L          &kp U          &kp Y           &kp SQT         X_RT
        //├──────┤ ├──────────────┼──────────────┼──────────────┼────────────────┼──────────────┤   ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────┤
            X_LM     &hml LGUI A   &hml LALT R     &hml LCTRL S   &hml LSHFT T     &kp G              &kp M           &hmr RSHFT N   &hmr RCTRL E   &hmr RALT I    &hmr RGUI O      X_RM   
        //├──────┤ ├──────────────┼──────────────┼──────────────┼────────────────┼──────────────┤   ├───────────────┼──────────────┼──────────────┼──────────────┼──────────────┤ ├──────┤
            X_LB     &kp Z         &kp X          &kp C           &kp D            &kp V              &kp K           &kp H          &kp COMMA      &kp DOT        &kp FSLH         X_RB
        //├──────┤ ╰──────────────┴──────────────┴──────────────┼────────────────┼──────────────┤   ├───────────────┼──────────────┼──────────────┴──────────────┴──────────────╯ ├──────┤
            X_LH                                                  &lt SYM SPACE    &lt NAV ENTER      &lt RHTLYR SPACE   &kp RSHFT                                                  X_RH
        //╰──────╯                                              ╰────────────────┴──────────────╯   ╰───────────────┴──────────────╯                                              ╰──────╯
            >;
        };

        symbol_layer {
            bindings = <
        //╭──────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬───────────╮ ╭──────╮
            X_LT    &caps_word  &trans     &kp LBKT   &kp RBKT   NAV_BSPC       &kp MINUS  &kp N7     &kp N8     &kp N9     &kp PLUS      X_RT
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼───────────┤ ├──────┤
            X_LM     &kp LPAR   &kp RPAR   &kp SQT    &kp SEMI   NAV_DEL        &kp FSLH   &kp N4     &kp N5     &kp N6     &kp ASTRK     X_RM  
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼───────────┤ ├──────┤
            X_LB     &kp MINUS  &kp EQUAL  &kp FSLH   &kp BSLH   &trans         &kp N0     &kp N1     &kp N2     &kp N3     &kp DOT       X_RB
        //├──────┤ ╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴───────────╯ ├──────┤
            X_LH                                      &trans     &trans         &trans     &trans                                         X_RH
        //╰──────╯                                  ╰──────────┴──────────╯   ╰──────────┴──────────╯                                   ╰──────╯
            >;
        };

        nav_layer {
            // display-name = "NAV";
            bindings = <
        //╭──────╮ ╭───────────┬───────────┬──────────┬──────────┬──────────╮   ╭─────────────┬──────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
            X_LT     &kp ESC     &trans      &kp DOWN   &kp UP     &trans         &kp PG_UP     NAV_BSPC       NAV_UP        NAV_DEL       &trans          X_RT
        //├──────┤ ├───────────┼───────────┼──────────┼──────────┼──────────┤   ├─────────────┼──────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
            X_LM     BACK        FWD         TAB_L      TAB_R      &trans         &kp PG_DN     NAV_LEFT       NAV_DOWN      NAV_RIGHT     &kp RET         X_RM  
        //├──────┤ ├───────────┼───────────┼──────────┼──────────┼──────────┤   ├─────────────┼──────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
            X_LB     &kp LGUI    &kp LSHFT   &kp GRAVE  &kp TAB    &trans         &trans        &kp EXCL       &kp Q         &kp W         &kp COLON       X_RB
        //├──────┤ ╰───────────┴───────────┴──────────┼──────────┼──────────┤   ├─────────────┼──────────────┼─────────────┴─────────────┴─────────────╯ ├──────┤
            X_LH                                        &trans     &trans         &trans        &trans                                                     X_RH
        //╰──────╯                                    ╰──────────┴──────────╯   ╰─────────────┴──────────────╯                                           ╰──────╯
            >;
        };

        left_layer {
            bindings = <
        //╭──────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────╮
        //       │            │  [       │  {       │  }       │          │   │  ^       │  (       │  )       │  ]       │  ~       │
            X_LT     &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE    X_RT
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤ ├──────┤
        //            !       │  @       │  #       │  $       │  %       │   │  *       │  -       │  =       │  \       │  `       │
            X_LM    &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE     X_RM
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤ ├──────┤
        //         │          │          │          │          │          │   │  &       │  _       │  +       │  │       │          │
            X_LB     &trans     &trans     &trans     &trans     &trans         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans       X_RB
        //├──────┤ ╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯ ├──────┤
            X_LH                                      &trans     &trans         &trans     &trans                                        X_RH
        //╰──────╯                                  ╰──────────┴──────────╯   ╰──────────┴──────────╯                                  ╰──────╯
            >;
        };

        tri_layer {
            bindings = <
        //╭──────╮ ╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮ ╭──────╮
            X_LT     MEH(Q)     MEH(W)     MEH(F)     MEH(P)     MEH(B)         &trans     &trans     &trans     &trans    &sys_reset    X_RT
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤ ├──────┤
            X_LM     MEH(A)     MEH(R)     MEH(S)     MEH(T)     MEH(T)         &trans     &trans     &trans     &trans    &bootloader   X_RM  
        //├──────┤ ├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤ ├──────┤
            X_LB     MEH(Z)     MEH(X)     MEH(C)     MEH(D)     MEH(V)         &trans     &trans     &trans     &trans     &trans       X_RB
        //├──────┤ ╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯ ├──────┤
            X_LH                                      &trans     &trans         &trans     &trans                                        X_RH
        //╰──────╯                                  ╰──────────┴──────────╯   ╰──────────┴──────────╯                                  ╰──────╯
            >;
        };
    };
};
